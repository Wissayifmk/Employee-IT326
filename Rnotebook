---
title: "R Notebook"
output: html_notebook
---
# This code is running using R notebook in RStudio
#Sample of row
```{r}
View(Employees)

```

#statiscal summarise -Nominal-
```{r}
summary(Employees$Education)
```

```{r}
summary(Employees$Department)
```

```{r}
summary(Employees$'Job Status')
```

```{r}
summary(Employees$Location)
```

#statiscal summarise -Numerical-
```{r}
summary(Employees$Years)
```

```{r}
summary(Employees$Salary)
```

```{r}
summary(Employees$'Job Rate')
```

```{r}
summary(Employees$Permissions)
```

#Code for variance
```{r}
var(Employees$Salary)
```

#Graphs

#Boox plot for salary and years
```{r}
boxplot(Employees$Salary)
```
Description for Salary boxplot:
The Salary boxplot illustrates that there are no outliers in Salary attribute, and it shows that the salaries are evenly distributed around the middle point, indicating a relatively balanced salary distribution.

```{r}
boxplot(Employees$Years)
```
Description for Years boxplot:
The Years of Work boxplot illustrates how the values in the dataset have relatively balanced around the median value of 4. Also, there are no outliers found. So, no need for preprocessing.
```{r}
boxplot(Employees$'Job Rate')
```
Description for Job rate boxplot:
The Job rate boxplot is relatively balanced around the median value of 5. In a more comprehensive analysis, no outliers exist in the Job rate attribute. However, there is a spread in the job rates above 50% of the dataset.

```{r}
boxplot(Employees$Permissions)
```
Description for Permissions boxplot:
The Permissions boxplot reveals several important insights about the distribution of Permissions. It illustrates that the values of the attribute are almost balanced near to the median. In addition to this, there is no outliers that must be removed in preprocessing stage.

#Histogram for permission 
```{r}
Permissions <- Employees$Permissions
hist(Permissions)
```
Description for Permissions histogram.:
The frequency of Permissions for the employees in the dataset is represented by the histogram. After observation, we noticed that the most values lie in approximately from 1 permission to 2. As for the rest of the employees, their Permissions range from 3 to 14 permission.

# pie chart fo job status 
```{r}
tab <- Employees$'Job Status' %>% table()
precentages <- tab %>% prop.table() %>% round(3) * 100 
txt <- paste0(names(tab), '\n', precentages, '%') 
pie(tab, labels=txt)
```
Description for Job Status pie chart:
The pie chart shows that more than half of the employees work as a full-time jub. In addition to this, it will helps us determine salaries for each employee according to their Job Status.

#pie chart for Education 
```{r}
tab <- Employees$Education %>% table()
precentages <- tab %>% prop.table() %>% round(3) * 100 
txt <- paste0(names(tab), '\n', precentages, '%') 
pie(tab, labels=txt)
```
#Data preprocessing 

#Data cleaning
# to find the total null values in the dataset
```{r}
dim(Employees)
Employees = na.omit(Employees)
dim(Employees)
sum(is.na(Employees))
```

#Detecting outliers
```{r}
OutSalary = outlier(Employees$Salary, logical =TRUE)
sum(OutSalary)
Find_outlierSalary = which(OutSalary ==TRUE, arr.ind = TRUE)
OutSalary
Find_outlierSalary
```

```{r}
OutPermissions = outlier(Employees$Permissions, logical =TRUE)
sum(OutPermissions)
Find_outlierPre = which(OutPermissions ==TRUE, arr.ind = TRUE)
OutPermissions
Find_outlierPre
```

```{r}
OutJobRate= outlier(Employees$'Job Rate', logical =TRUE)
sum(OutJobRate)
Find_outlierJob = which(OutJobRate ==TRUE, arr.ind = TRUE)
OutJobRate
Find_outlierJob
```

```{r}
OutYears= outlier(Employees$Years, logical =TRUE)
sum(OutYears)
Find_outlierYears = which(OutYears ==TRUE, arr.ind = TRUE)
OutYears
Find_outlierYears
```
```{r}
summary(Employees)
str(Employees)
```

```{r}
#Removing outliers
Employees= Employees[-Find_outlierSalary,]
Employees= Employees[-Find_outlierPre,]
Employees= Employees[-Find_outlierJob,]
Employees= Employees[-Find_outlierYears,]
```

```{r}
summary(Employees)
str(Employees)
```


#Define function normalize().
```{r}
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
```

#Define function Z_normalize().
```{r}
Z_normalize <- function(x) {return ((x - mean(x)) / sd(x))}
```

#Call normalize funcrtion
```{r}
Employees$Permissions<-normalize(Employees$Permissions)
print(Employees)

Employees$'Job Rate'<-normalize(Employees$'Job Rate')
print(Employees)

Employees$Salary<-normalize(Employees$Salary)
print(Employees)

Employees$Years<-normalize(Employees$Years)
print(Employees)
```


#Call Z_normalize funcrtion
```{r}
Employees$Permissions<-Z_normalize(Employees$Permissions)
print(Employees)

Employees$'Job Rate'<-Z_normalize(Employees$'Job Rate')
print(Employees)

Employees$Salary<-Z_normalize(Employees$Salary)
print(Employees)

Employees$Years<-Z_normalize(Employees$Years)
print(Employees)
```
#Discretization

```{r}
Employees$Years <- ifelse(Employees$Years <= 0, "Entry level",
                                 ifelse(Employees$Years <= 3, "Intermediate level",
                                           ifelse(Employees$Years <= 9, "Advanced level",0)))
```

```{r}
Employees$Salary_Range <- ifelse(Employees$Salary <= 600, "600-1000",
                          ifelse(Employees$Salary <= 1000, "1000-1600",
                                 ifelse(Employees$Salary <= 1600, "1600-2000",
                                        ifelse(Employees$Salary <= 2600, "2000-2600", "Above 2600"))))
```

```{r}
Employees$`Job Rate` <- ifelse(Employees$`Job Rate` <= 1, "1-6",
                          ifelse(Employees$`Job Rate` <= 6, "6-10",
                              ifelse(Employees$`Job Rate` <= 13, "10-13","Above 13")))
```

```{r}
Employees$Permissions <- ifelse(Employees$Permissions <= 1, "1-7",
                                ifelse(Employees$Permissions <= 7, "7-11",
                                      ifelse(Employees$Permissions <= 14, "11-14","Above 14")))
```
